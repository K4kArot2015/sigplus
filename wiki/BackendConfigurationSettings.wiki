#summary List of configuration parameters available in the back-end.

<wiki:comment>
This file has been automatically generated by a tool.
</wiki:comment>

= Basic settings =

== base_folder ==

*Back-end name*: Base folder

*Summary*: Base directory w.r.t. which relative image gallery paths in the activation tag are interpreted. Use a path relative to Joomla root or an absolute path (advanced users only). Setting the base folder to `images` (default) and writing `{gallery}sigplus/birds{/gallery}` in a content item maps to the file system path `_root_/images/sigplus/birds`. If you use a path that points outside the Joomla root, you must also set _Base URL_.

== layout ==

*Back-end name*: Gallery layout

*Type/value*: `fixed`|`flow`|`packed`|`hidden`

*Summary*: The way the image gallery is rendered. _Fixed layout_ is a table-like environment with a set number of rows and columns, and a fixed width and height, where preview images occupy cells of a table. Fixed layout is associated with a rotator and navigation controls, showing only part of the entire gallery at a time. _Flow layout_ renders preview images as if they were words of a text, allowing the series of images to span multiple lines if they would not fit into a single line, just as normal text breaks into lines if it is too long to fit into a single line. Flow layout is very flexible but does not permit an image rotator. _Hidden layout_ (only available for the plug-in) makes sigplus render the gallery without any user interface directly on the page; images in a hidden gallery can only be accessed with a pop-up window that is linked to it.

== rows ==

*Back-end name*: Image row count

*Type/value*: _positive_integer_

*Summary*: Number of rows used to display preview images. This setting has no effect when flow layout is used.

*Example*: `{gallery layout=fixed rows=2 cols=3}myfolder{/gallery}` shows a gallery in a 2-by-3 grid arrangement.

== cols ==

*Back-end name*: Image column count

*Type/value*: _positive_integer_

*Summary*: Number of columns used to display preview images. This setting has no effect when flow layout is used.

== maxcount ==

*Back-end name*: Maximum image count

*Type/value*: _integer_

*Summary*: Maximum number of preview images to show. If set to zero, all images in the gallery will be shown as previews, possibly broken down into multiple pages. If set to a positive integer, only the specified number of preview images will be displayed, even though it is still possible to view all images when browsing the gallery inside the lightbox pop-up window.

*Example*: `{gallery rows=2 cols=3 maxcount=5}myfolder{/gallery}` shows at most 5 preview images arranged in a 2-by-3 grid.

== alignment ==

*Back-end name*: Alignment on page

*Type/value*: `left`|`center`|`right`|`before`|`after`|`left-float`|`right-float`|`before-float`|`after-float`|`left-clear`|`right-clear`|`before-clear`|`after-clear`

*Summary*: Horizontal alignment of the image gallery on the page. Values that end in `float` allow text to wrap around the gallery, values that end in `clear` do not. The options `before` and `after` use language-sensitive alignment, i.e. `before` automatically takes a value of `left` for left-to-right (LTR) and a value of `right` for right-to-left (RTL) languages, while the option `after` is the opposite of `before`. The options `before` and `after` are intended for multilingual sites (e.g. English and Hebrew).

*Example*: `{gallery alignment=before-float}fruit{/gallery}` left-aligns the gallery on an English site, allowing text to wrap around.

== preview_width ==

*Back-end name*: Preview image width

*Type/value*: _nonnegative_integer_

*Summary*: Default width of preview images to generate [​px​]. Use the special value `0` with cropping disabled to have the image width automatically computed (i.e. all images will have the same width).

== preview_height ==

*Back-end name*: Preview image height

*Type/value*: _nonnegative_integer_

*Summary*: Default height of preview images to generate [​px​]. Use the special value `0` with cropping disabled to have the image height automatically computed (i.e. all images will have the same height).

== preview_crop ==

*Back-end name*: Crop when rescaling

*Type/value*: _boolean_

*Summary*: Crop overflowing dimensions when scaling images to preview image size. If set to _yes_ and the ratio of preview image width and height differs from that of the original image, excess parts of the original image are cropped from top and bottom or left and right when rescaling to preview image dimensions. If set to _no_, the preview image always shows the entire image and the appropriate dimension is reduced. As an example, suppose preview image width and height is set to 100 px. With cropping on, the left and right part of an image with width 400 px and height 200 px will be cut off, and the resulting center 200 px-by-200 px part will be shrunk to preview image size. With cropping off, the entire image will be used to generate the preview image such that the preview image will have dimensions 100 px and 50 px.

== lightbox ==

*Back-end name*: Lightbox pop-up type

*Type/value*: _string_

*Summary*: Lightweight pop-up window engine to display images when a user clicks or moves the mouse over a preview image. Most pop-up windows are activated on mouse click but some on mouse-over. Engines that use !MooTools use the version integrated into Joomla, whereas engines that use jQuery either use a local copy of the script library or import jQuery from a Content Delivery Network (CDN).

*Example*: `{gallery lightbox=boxplus/darksquare}myfolder{/gallery}` uses the boxplus pop-up window dark theme to display images when a preview image is clicked.

== lightbox_autocenter ==

*Back-end name*: Center on scroll

*Type/value*: _boolean_

*Summary*: Whether to center the pop-up window when its size is less than browser window size and the user scrolls down or across the page. Pop-up windows that exceed browser window size are never auto-centered.

== lightbox_autofit ==

*Back-end name*: Fit to window

*Type/value*: _boolean_

*Summary*: Whether to automatically reduce oversized images to fit the browser window when they are displayed. Flash and video are always shown in their predefined size, even if they would not fit the screen. When autofit is enabled, an expand/contract control will be shown (typically in the top right corner of the image) to let the user view the image in its original size. Not all pop-up window engines support fit to window.

== lightbox_thumbs ==

*Back-end name*: Lightbox navigation bar

*Type/value*: `none`|`inside`|`outside`

*Summary*: Placement of thumbnail navgiation bar relative to the image shown inside lightbox. When the navigation bar is superimposed over the image, it is only shown while the mouse pointer is within the hotspot area of the navigation container. In contrast, a navigation bar outside the image container is permanently visible. The navigation bar is not shown when the gallery compises of a single image, and no space is reserved in this case even with the outside placement option. Not all pop-up window engines support thumbnail navigation.

== lightbox_slideshow ==

*Back-end name*: Slideshow delay [​ms​]

*Type/value*: _nonnegative_integer_

*Summary*: Time each image is shown [​ms​] when slideshow mode is activated inside the lightbox pop-up window, or 0 to disable slideshow mode. When slideshow mode is disabled, no _Play_ control button is not shown in the pop-up window. Not all pop-up window engines support slideshow mode.

*Example*: `{gallery lightbox-slideshow=4000}fruit{/gallery}` makes a slideshow control button appear in the pop-up window; pressing the button will trigger a slideshow, automatically showing the next image after 4 seconds of delay.

== lightbox_autostart ==

*Back-end name*: Autostart slideshow

*Type/value*: _boolean_

*Summary*: Whether to automatically activate slideshow mode when the pop-up window opens. Not all pop-up window engines support auto-starting slideshows. With autostart disabled, the user has to click the _Play_ control button to start a slideshow. Autostart has no effect when the slideshow mode is disabled.

== rotator_orientation ==

*Back-end name*: Image rotator orientation

*Type/value*: `horizontal`|`vertical`

*Summary*: Orientation of the image rotator viewport. Horizontally oriented rotators move from the right to the left, vertically oriented rotators move from downwards to upwards. Setting the number of rows and columns for the gallery does not affect rotator orientation, which determines the direction the image rotator moves, i.e. it is possible to have a 1-by-3 fixed layout gallery rotating either horizontally or vertically. Images are automatically ordered in the grid to take into account orientation, independently of the number of rows and columns.

== rotator_buttons ==

*Back-end name*: Hotspot navigation

*Type/value*: _boolean_

*Summary*: Show navigation control buttons `&lt;` and `&gt;` on mouse-over in the image rotator. These buttons do not take up additional space and are shown only when the mouse moves over the image gallery (either at the left and right side for horizontally oriented sliders or at the top and bottom for vertically oriented sliders).

== rotator_navigation ==

*Back-end name*: Navigation bar

*Type/value*: `bottom`|`top`|`none`|`both`

*Summary*: Placement of permanently visible navigation bar for the image rotator. The navigation bar shows control links such as _Previous_ (`&lt;`) or _Next_ (`&gt;`).

== rotator_links ==

*Back-end name*: Paging buttons

*Type/value*: _boolean_

*Summary*: Whether to show buttons that immediately take to a specific rotator image or page. This allows speedy navigation when the gallery comprises of many images. The semantics of the buttons reflect how much the rotator advances in a navigation step.

== rotator_trigger ==

*Back-end name*: Navigation trigger

*Type/value*: `click`|`mouseover`

*Summary*: User action that causes the rotator to start advancing.

== rotator_step ==

*Back-end name*: Trigger action step

*Type/value*: `single`|`page`

*Summary*: Unit to advance the rotator upon clicking navigation controls _Previous_ and _Next_. The value _page_ navigates the user to the next set of images, i.e. each of the images currently shown is replaced with another image or empty space, whereas the value _single_ advances the rotator by a single image, a single row or a single column, depending on context.

*Example*: `{gallery rows=2 cols=3 rotator-orientation=horizontal rotator-step=single}mygallery{/gallery}` causes the rotator to advance by a single column when using navigation controls _Previous_ and _Next_.

== rotator_duration ==

*Back-end name*: Slide duration [​ms​]

*Type/value*: _nonnegative_integer_

*Summary*: Time taken for the rotator to move from one page to another [​ms​].

*Example*: `{gallery rotator-duration=800}fruit{/gallery}` makes the slide animation between pages take 0.8 seconds.

== rotator_delay ==

*Back-end name*: Animation delay [​ms​]

*Type/value*: _nonnegative_integer_

*Summary*: Time taken between successive automatic slide steps when the mouse moves away from over the rotator [​ms​]. Use a value of zero to disable automatic “idle” animation.

== loop ==

*Back-end name*: Wrap around at end

*Type/value*: _boolean_

*Summary*: Whether the image sequence wraps around (loops) such that the first item follows the last and the last precedes the first when clicking navigation buttons.

== caption_visibility ==

*Back-end name*: Image caption visibility

*Type/value*: `none`|`mouseover`|`always`

*Summary*: Visibility of image captions; determines whether captions should always be shown, or only when the mouse pointer is moved over the image. The caption is never visible if an image does not have caption text.

== caption_position ==

*Back-end name*: Image caption position

*Type/value*: `overlay-bottom`|`overlay-top`|`below`|`above`

*Summary*: Place to show the image caption relative to the image. Overlay captions display the image title in a translucent box that shows up in the top or bottom part of the preview image. Other settings for position reserve additional space for the caption text.

== caption_title ==

*Back-end name*: Default image title

*Type/value*: _string_

*Summary*: Title assigned to images when no image title is embedded in image metadata or supplied in a labels file. Title text accepts BBCode (bulletin board code) with markers for `[b]bold[/b]`, `[i]italic[/i]`, `[u]underline[/u]`, `[s]strikethrough[/s]`, `[sub]subscript[/sub]`, `[sup]superscript[/sup]`, `[url]http://example.com[/url]` and `[url=http://example.com]link[/url]`, and with linefeeds converted into line breaks.

== caption_summary ==

*Back-end name*: Default image summary

*Type/value*: _string_

*Summary*: Short summary text assigned to images when no image summary is embedded in image metadata or supplied in a labels file. Similarly to title text, it accepts BBCode.


= Advanced settings =

== download ==

*Back-end name*: Download access level

*Summary*: Access level required to show the download icon in pop-up window and in captions. When the user with the appropriate access level (e.g. Registered) clicks the icon, the browser prompts the user to save the original image to their local computer. If a high-resolution image is available in a separate folder, the user will be prompted to download that image, otherwise the same image will be downloaded as displayed in the pop-up window.

*Example*: `{gallery download="Registered"}myfolder{/gallery}` makes the gallery accessible to registered users only (on a standard Joomla installation).

== metadata ==

*Back-end name*: Metadata access level

*Summary*: Access level required to show the metadata icon in pop-up window and in captions. When the user with the appropriate access level (e.g. Registered) clicks the icon, metadata and other digital camera information and other image metadata like caption, summary, creator and copyright are displayed in a separate scrollable pop-up window. Some pop-up window implementations do not permit displaying metadata.

== protection ==

*Back-end name*: Image protection

*Type/value*: _boolean_

*Summary*: Whether to employ client-side image protection measures. Client-side image protection captures and suppresses mouse right-click (_contextmenu_) and drag-and-drop actions (_dragstart_), thereby preventing visitors from easily saving images to their own computer. While useful against a large group of users, client-side prevention mechanisms are completely ineffective against power users who can easily extract images by saving a page snapshot or inspecting the temporary internet files folder, which cannot be prevented with any scripting measure. For a safer alternative, consider watermarking (on the server) instead, which will irreversibly embed a watermark in the image. Not all pop-up window engines support client-side protection.

== preview_margin ==

*Back-end name*: Preview margin

*Summary*: Margin around preview images [​px​]; use a number with or without a unit, numbers without a unit default to pixels (`px`). The margin clears a completely transparent area around the border. If omitted, the margin specified in the style sheet file (`sigplus.css`) applies.

*Example*: `{gallery preview-margin=4}myfolder{/gallery}` adds a margin of 4 pixels around the border of each image in the gallery.

== preview_border_style ==

*Back-end name*: Preview border style

*Summary*: Style of border to display around preview images. The border lies around the padding and the preview image. If set to _default_, the border style specified in the style sheet file (`sigplus.css`) applies.

== preview_border_width ==

*Back-end name*: Preview border width

*Summary*: Width of border to display around preview images [​px​]; use a number with or without a unit, numbers without a unit default to pixels (`px`). If omitted, the border width specified in the style sheet file (`sigplus.css`) applies.

== preview_border_color ==

*Back-end name*: Preview border color

*Summary*: Color of border to display around preview images.  If omitted, the border color specified in the style sheet file (`sigplus.css`) applies. Specify a hexadecimal value between #000000 and #FFFFFF inclusive in the RGB system (red: #FF0000, green: #00FF00, blue: #0000FF), or use the color picker. If border style is _none_, this setting has no effect.

*Example*: `{gallery preview-border-width=1 preview-border-style=dotted preview-border-color="000000"}myfolder{/gallery}` adds a black dotted border of a single pixel width around each image in the gallery.

== preview_padding ==

*Back-end name*: Preview padding

*Summary*: Padding around preview images [​px​]; use a number with or without a unit, numbers without a unit default to pixels (`px`). The padding clears an area directly around the preview image within border bounds. If omitted, the padding specified in the style sheet file (`sigplus.css`) applies.

== sort_criterion ==

*Back-end name*: Image sort criterion

*Summary*: Criterion to use to arrange images within a gallery: images are sorted according to the specified criterion in the specified order. Criteria that are based on a labels file have a fallback option (in parentheses): when no labels file is found (or there are images not listed in the labels file), the fallback criterion is used to sort (the remaining) images. Criteria that are not based on a labels file sort irrespective of the order of entries in a possible labels file, even if it exists.

*Example*: `{gallery sort-criterion=filename sort-order=asc}myfolder{/gallery}` sorts images in the gallery by filename in ascending order (A to Z).

== sort_order ==

*Back-end name*: Image sort order

*Summary*: Order to use within the specified sort criterion: images are sorted according to the specified criterion in the specified order.

*Example*: `{gallery sort-criterion=mtime sort-order=desc}mygallery{/gallery}` sorts images in the gallery by last modification time in descending order (image last uploaded first).

== depth ==

*Back-end name*: Recursion depth

*Type/value*: _nonnegative_integer_

*Summary*: Recursion limit for scanning directory hierarchies in the file system. The value of 0 restricts images to be included in a gallery to those in the source folder. The value -1 performs a recursive traversal of the directory hierarchy and includes any images that are found in the source folder or any of its descendant folders. A positive value (recommended) sets a depth limit on the recursion.

== watermark_position ==

*Back-end name*: Watermark position

*Type/value*: '`|`n`|`ne`|`e`|`se`|`s`|`sw`|`w`|`nw`|`c'

*Summary*: The position within the image where the watermark is superimposed. For values other than _none_, the image to use as a watermark should be an image file with alpha channel transparency and placed in either the image source folder (where the images that are shown in the gallery are), the watermark folder or the base folder. When the watermark is superimposed, the original image is not altered but a new watermarked image is created instead.

*Example*: `{gallery watermark-position=se watermark-x=15 watermark-y=10}buildings{/gallery}` applies a watermark to each image in the folder `buildings`. The watermark is placed in the bottom right (southeast) corner, 15 pixels from the right edge and 10 pixels from the bottom edge.

== watermark_x ==

*Back-end name*: Distance from horizontal

*Type/value*: _nonnegative_integer_

*Summary*: The distance to keep from the left or right edge [​px​], as appropriate. The distance from the vertical edge is not meaningful for placements center, north and south for which the watermark is automatically centered horizontally.

== watermark_y ==

*Back-end name*: Distance from vertical

*Type/value*: _nonnegative_integer_

*Summary*: The distance to keep from the top or bottom edge [​px​], as appropriate. The distance from the horizontal edge is not meaningful for placements center, east and west for which the watermark is automatically centered vertically.

== watermark_source ==

*Back-end name*: Filename for watermark

*Type/value*: _string_

*Summary*: Name to use for the image file (with extension) that serves as a watermark. The image should be a file with alpha channel transparency and placed in either the image gallery folder (where the images that are shown in the gallery are), the subfolder for watermarked images, or the image base folder.

== thumb_width ==

*Back-end name*: Thumbnail width

*Type/value*: _positive_integer_

*Summary*: Default width of thumbnail images to generate [​px​].

== thumb_height ==

*Back-end name*: Thumbnail height

*Type/value*: _positive_integer_

*Summary*: Default height of thumbnail images to generate [​px​].

== thumb_crop ==

*Back-end name*: Crop when resizing

*Type/value*: _boolean_

*Summary*: Crop overflowing dimensions when resizing to thumbnail image size. If yes and the ratio of thumbnail image width and height differs from that of the original image, excess parts of the original image are cropped from top and bottom or left and right when resizing to thumbnail image dimensions. If no, the thumbnail image always shows the entire image and the appropriate dimension is reduced.

== lightbox_transition ==

*Back-end name*: Lightbox transition effect

*Type/value*: _string_

*Summary*: Easing equation to use for the lightbox warp transition effect, i.e. speed at which the sizing animation progresses at different stages of a lightbox opens or changes animation sequence.

== rotator_alignment ==

*Back-end name*: Rotator item alignment

*Type/value*: `c`|`n`|`ne`|`e`|`se`|`s`|`sw`|`w`|`nw`

*Summary*: Positioning of items within their container.

== rotator_transition ==

*Back-end name*: Rotator transition effect

*Type/value*: _string_

*Summary*: Easing equation to use for the rotator transition effect, i.e. speed at which the rotate animation progresses at different stages of a slide animation sequence.

== caption_title_template ==

*Back-end name*: Image title template

*Type/value*: _string_

*Summary*: Template for the image title with placeholders like {$text}, {$filename}, {$current} and {$total}, which will be automatically substituted with the image title text (either the explicitly specified one or the default), the image file name, the ordinal number of the image in its gallery and the total number of images in the gallery, respectively. In addition, image title template accepts BBCode, similarly to default image title.

== caption_summary_template ==

*Back-end name*: Image summary template

*Type/value*: _string_

*Summary*: Template for the image summary with the same placeholders as the title template. In addition, image summary template accepts BBCode, similarly to default image summary.

== cache_image ==

*Back-end name*: Folder for caching images

*Summary*: Whether to use Joomla cache folder, the Joomla media folder, or the image source folder for storing generated preview images and thumbnails. This setting has no performance implications, it only affects how generated images are organized on the server. If the Joomla cache (or media) folder is chosen, generated image folders are created inside the cache (or media) folder, letting you clean up generated images directly from the Joomla back-end with a few clicks. Since the cache folder is shared across all galleries, image file names are hashed to avoid name conflicts. If the image source folder is chosen, generated image folders are created as child folders of their respective image source folders. A subdirectory naming scheme ensures that generated images of different sizes and cropping methods do not overwrite one another when configuration settings are altered.

== folder_thumb ==

*Back-end name*: Thumbnail folder

*Summary*: Subdirectory to store thumbnail images. Thumbnail images are low-resolution images with width and height of at most 100 pixels used inside a pop-up window to help navigation. Use a relative path, which is interpreted w.r.t. the image folder (or the cache folder). With no cache folder use, default image base and thumbnail folder, using `sigplus/birds` as the images folder causes thumbnails to be read from `_root_/images/sigplus/birds/thumbs`. Appropriate file permissions are required to automatically create this folder and the thumbnails within.

== folder_preview ==

*Back-end name*: Preview folder

*Summary*: Subdirectory to store preview images. Preview images are low- to medium-resolution images typically displayed in an image rotator. Preview images are retrieved from the server on demand, i.e. only those preview images are downloaded that are being shown. Use a relative path, which is interpreted w.r.t. the image source folder (or the cache folder). With no cache folder use, default image base and preview image folder, using `sigplus/birds` as the images folder causes preview images to be read from `_root_/images/sigplus/birds/preview`. Appropriate file permissions are required to automatically create this folder and the preview images within.

== folder_fullsize ==

*Back-end name*: Folder for originals

*Summary*: Subdirectory to look for high-resolution original images. When the user clicks the download icon, the browser will prompt to save the image in this folder to the user's local computer instead of the (possibly lower-resolution) image that is being shown in the lightbox pop-up window. The full-size image folder is useful for providing a high-quality image version for archival or printing rather than web browsing. If no high-quality version is available, the same image as shown in the lightbox pop-up window will be downloaded. Use a relative path, which is interpreted w.r.t. the image source folder.

== folder_watermarked ==

*Back-end name*: Folder for watermarking

*Summary*: Subdirectory to save watermarked images. A watermarked image has the same width and height as the corresponding original image but has the watermark irreversibly embedded in it.

== quality ==

*Back-end name*: Generated image quality

*Type/value*: percentage

*Summary*: Image quality parameter for generating preview images and thumbnails with the lossy JPEG compression. Ranges from 0 (worst quality, smaller file) to 100 (best quality, biggest file) inclusive. Other image types with lossless compression (e.g. PNG or GIF) are not affected.

== caption_source ==

*Back-end name*: Filename for labels

*Type/value*: _string_

*Summary*: Name to use for the text file (with extension) that contains image labels and descriptions.

== multilingual ==

*Back-end name*: Use multilingual labels

*Summary*: Support language-sensitive image file labeling. If enabled, labels file is selected based on the site language, e.g. English (UK) uses `labels.en-GB.txt`. Multilingual support is useful if your site displays in multiple languages, e.g. by means of the _Joomfish_ component. Should you have a labels file `labels.en-GB.txt` for English visitors and a `labels.pt-PT.txt` for Portuguese visitors, sigplus will use the language file that matches the visitor's current language. If no labels file is found with the matching language, there is a fallback to `labels.txt` as if multilingual support was not enabled. If your site uses a single language (which should not necessarily be English), you can safely disable multilingual support and use a `labels.txt` file to store your captions.

== tag_gallery ==

*Back-end name*: Gallery activation tag

*Summary*: Sets the activation tag used for invoking sigplus. Changing this setting is recommended only if sigplus conflicts with another image gallery plug-in that would also be activated with the `{gallery}` tag. The tag name may only contain (English) letters and is case-sensitive.

== tag_lightbox ==

*Back-end name*: Lightbox activation tag

*Summary*: Sets the activation tag used for associating a link with the lightbox pop-up window. Changing this setting is recommended only if sigplus conflicts with another lightbox plug-in that would also be activated with the `{lightbox}` tag. The tag name may only contain (English) letters and is case-sensitive.

== settings_exporter ==

*Back-end name*: Migrate settings

*Summary*: Save current settings to or restore settings from !JavaScript Object Notation (JSON).


= Expert settings =

== base_url ==

*Back-end name*: Base URL

*Summary*: Base URL that corresponds to absolute base folder. This field should be left empty if the base folder is a relative path w.r.t. the Joomla root directory. However, if an absolute path is specified for the base folder, which typically happens when images are served from the same file system but under a different domain or subdomain, this setting determines what to prefix image folder paths with.

== library_jsapi ==

*Back-end name*: !JavaScript library source

*Summary*: Source for !JavaScript libraries not native to the Joomla framework (e.g. jQuery). Use a Content Delivery Network (CDN) to fetch script libraries when the site is exposed to the public internet, in which case the pages of your site may load significantly faster. On the other hand, you might want to set !JavaScript library source to a _local copy_ if your template uses a script merger or your site is accessible only within a (corporate) intranet; or _none_ if you use a separate system plug-in to load script libraries. This setting (with a value other than _none_) only affects performance, not functionality. The setting has no effect when only the !MooTools framework is in use, which is served by Joomla.

== library_image ==

*Back-end name*: Image processing library

*Summary*: Image processing library to use for generating thumbnail, preview and watermarked images. Only those PHP libraries are listed that are supported by your system. When this setting reads _none_, you will not be able to use automatic image generation services normally provided by sigplus, and will have to supply your own images generated off-line.

== debug_client ==

*Back-end name*: Client debug mode

*Summary*: Whether to use uncompressed versions of lightbox and rotator engine scripts. Normally, compressed and obfuscated versions of these scripts are used to conserve network bandwidth usage. Debug mode is useful if you experience a script error on a page and you would like to discover its cause, which is difficult to perform with obfuscated names. When asking for support, please make sure to enable client debug mode.

== debug_server ==

*Back-end name*: Server debug mode

*Summary*: The verbosity level of printing error, warning and status messages of actions performed on the server. This allows identifying any problematic points (e.g. an unrecognized image format) encountered while a gallery is being generated. The default behavior is to show error and warning messages, and reveal the gallery parameters. The level _laconic_ allows only for a very generic error message and hides as much information as possible. The level _verbose_ displays a detailed log trace.
